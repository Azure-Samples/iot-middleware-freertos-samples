@startuml Azure IoT HFSM

state AzureIot {
    state Idle
    
    state Provisioning
    Provisioning: <b>entry/</b>
    Provisioning : \t retryCount = 0
    Provisioning : \t startSeconds = startstopwatch()
    Provisioning : \t initialize timer
    Provisioning :
    Provisioning : <b>exit/</b>
    Provisioning : \t destroy timer
    Provisioning :
    Provisioning : <b>TIMEOUT/</b>
    Provisioning :  \t startSeconds = startstopwatch()
    Provisioning : \t start_provisioning()

    state Hub
    Hub : <b>entry/</b>
    Hub : \t retryCount = 0
    Hub : \t startSeconds = startstopwatch()
    Hub : \t initialize timer
    Hub :
    Hub : <b>exit/</b>
    Hub : \t destroy timer
    Hub : 
    Hub : <b>TIMEOUT/</b>
    Hub : \t startSeconds = startstopwatch()
    Hub : \t start_hub()
    
    [*] -> Idle
    Idle --> Provisioning : AZ_IOT_START / start_provisioning()
    Provisioning --> Hub : AZ_IOT_PROVISIONING_DONE / start_hub()

    Hub -> Provisioning : AZ_IOT_START
}

AzureIot : <b>entry/</b> 
AzureIot : \t credential_idx = 0
AzureIot :
AzureIot : <b>AZ_IOT_ERROR/</b>
AzureIot :  \t retryCount++
AzureIot :  \t elapsedSeconds = getSeconds() - startSeconds
AzureIot : \t if (retriable_error()) {
AzureIot : \t\t start timer(calculate_retry_delay(elapsedSeconds, retryCount))
AzureIot : \t }
AzureIot : \t else {
AzureIot : \t\t credential_idx = rotate_dps_credentials()
AzureIot:  \t\t startSeconds = startstopwatch()
AzureIot : \t\t start_provisioning()
AzureIot : \t }
AzureIot :
AzureIot :
AzureIot : <b>ERROR/</b> reboot

@enduml
